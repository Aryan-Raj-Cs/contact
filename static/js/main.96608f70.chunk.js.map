{"version":3,"sources":["components/elements/Navbar.js","components/contacts/Contact.js","actions/contactAction.js","constant/types.js","components/contacts/Contacts.js","reducers/contactReducer.js","reducers/index.js","store.js","components/contacts/AddContact.js","components/contacts/EditContact.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","dispatch","useDispatch","className","to","type","placeholder","onChange","e","target","value","payload","style","outline","padding","Contact","contact","selectAll","useState","checked","setChecked","name","phone","email","id","onClick","size","round","deleteContact","cursor","Contacts","setSelectAll","contacts","useSelector","state","searchContacts","searching","console","log","selctedContcats","selectedContacts","useEffect","map","length","htmlFor","key","intialState","username","combineReducers","action","search","filter","includes","arr","values","val","store","createStore","rootReducer","composeWithDevTools","AddContact","history","useHistory","setName","setEmail","setPhone","onSubmit","preventDefault","new_contact","shortid","generate","push","craeteContact","EditContact","useParams","getContact","update_contact","Object","assign","updateContact","onUpdateContact","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.96608f70.chunk.js","sourcesContent":["import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\n\nconst Navbar = () => {\n  // const [search, setSearch] = useState(\"\");\n  const dispatch = useDispatch();\n  const searchContact = (e) => {\n    if (e.target.value) {\n      dispatch({ type: \"SEARCHING_TRUE\" });\n      dispatch({ type: \"SEARCH_CONTACT\", payload: e.target.value });\n    } else dispatch({ type: \"SEARCHING_FALSE\" });\n  };\n  return (\n    <nav className=\"navbar shadow fixed-top navbar-expand-sm navbar-dark bg-primary\">\n      <div className=\"container\">\n        <Link to=\"/\" className=\"navbar-brand\">\n          Contact Book\n        </Link>\n        {/* <TextField id=\"standard-basic\" label=\"Standard\" /> */}\n        <input\n          type=\"text\"\n          placeholder=\"search...\"\n          onChange={searchContact}\n          style={{ outline: \"none\", padding: \"3px\" }}\n        />\n        <div>\n          <Link to=\"/contacts/add\" className=\"btn btn-light ml-auto\">\n            Create Contact\n          </Link>\n        </div>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React, { useState } from \"react\";\nimport Avatar from \"react-avatar\";\nimport { Link } from \"react-router-dom\";\nimport { deleteContact } from \"../../actions/contactAction\";\nimport { useDispatch } from \"react-redux\";\n\nconst Contact = ({ contact, selectAll }) => {\n  const dispatch = useDispatch();\n  const [checked, setChecked] = useState(false);\n  const { name, phone, email, id } = contact;\n\n  return (\n    <tr>\n      <td>\n        <input\n          type=\"checkbox\"\n          checked={selectAll || checked}\n          onClick={() => {\n            if (!selectAll) setChecked(!checked);\n          }}\n        />\n      </td>\n      <td>\n        <Avatar className=\"mr-2\" name={name} size=\"45\" round={true} /> {name}\n      </td>\n      <td>{phone}</td>\n      <td>{email}</td>\n      <td className=\"actionsqq\">\n        {checked && (\n          <>\n            <Link to={`/contacts/edit/${id}`}>\n              <span className=\"material-icons mr-2\">edit</span>\n            </Link>\n            <span\n              className=\"material-icons  text-danger\"\n              onClick={() => dispatch(deleteContact(id))}\n              style={{ cursor: \"pointer\" }}\n            >\n              remove_circle\n            </span>\n          </>\n        )}\n      </td>\n    </tr>\n  );\n};\n\nexport default Contact;\n","import {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n} from \"../constant/types\";\n\n// actions\nexport const addContact = (contact) => ({\n  type: CREATE_CONTACT,\n  payload: contact,\n});\n\n// get a contact\nexport const getContact = (id) => ({\n  type: GET_CONTACT,\n  payload: id,\n});\n\n// update a contact\nexport const updateContact = (contact) => ({\n  type: UPDATE_CONTACT,\n  payload: contact,\n});\n\n// delete a contact\nexport const deleteContact = (id) => ({\n  type: DELETE_CONTACT,\n  payload: id,\n});\n\n// select all contact\nexport const selectAllContact = (id) => ({\n  type: SELECT_CONTACT,\n  payload: id,\n});\n\n// clear selected contacts\nexport const clearAllContact = () => ({\n  type: CLEAR_CONTACT,\n});\n\n// delete selected contacts\nexport const deleteAllContact = () => ({\n  type: DELETE_SELECTED_CONTACT,\n});\n","export const CREATE_CONTACT = \"CREATE_CONTACT\";\nexport const SEARCH_CONTACT = \"CREATE_CONTACT\";\nexport const GET_CONTACT = \"GET_CONTACT\";\nexport const UPDATE_CONTACT = \"UPDATE_CONTACT\";\nexport const DELETE_CONTACT = \"DELETE_CONTACT\";\nexport const SELECT_CONTACT = \"SELECT_CONTACT\";\nexport const CLEAR_CONTACT = \"CLEAR_CONTACT\";\nexport const DELETE_SELECTED_CONTACT = \"DELETE_SELECTED_CONTACT\";\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Contact from \"./Contact\";\nimport {\n  selectAllContact,\n  clearAllContact,\n  deleteAllContact,\n} from \"../../actions/contactAction\";\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n  const [selectAll, setSelectAll] = useState(false);\n  const contacts = useSelector((state) => state.contact.contacts);\n  const searchContacts = useSelector((state) => state.contact.searchContacts);\n  const searching = useSelector((state) => state.contact.searching);\n  console.log(\"search\", searching);\n  const selctedContcats = useSelector(\n    (state) => state.contact.selectedContacts\n  );\n\n  useEffect(() => {\n    if (selectAll) {\n      dispatch(selectAllContact(contacts.map((contact) => contact.id)));\n    } else {\n      dispatch(clearAllContact());\n    }\n  }, [selectAll, dispatch, contacts]);\n\n  return (\n    <div>\n      {selctedContcats.length > 0 ? (\n        <button\n          className=\"btn btn-danger mb-3\"\n          onClick={() => dispatch(deleteAllContact())}\n        >\n          delete all\n        </button>\n      ) : null}\n      <table className=\"table shadow\">\n        <thead>\n          <tr>\n            <th>\n              <div className=\"custom-control custom-checkbox\">\n                <input\n                  id=\"selectAll\"\n                  type=\"checkbox\"\n                  className=\"custom-control-input\"\n                  value={selectAll}\n                  onClick={() => setSelectAll(!selectAll)}\n                />\n                <label\n                  htmlFor=\"selectAll\"\n                  className=\"custom-control-label\"\n                ></label>\n              </div>\n            </th>\n            <th>Name</th>\n            <th>Phone</th>\n            <th>E-mail</th>\n            <th>Actions</th>\n          </tr>\n        </thead>\n        <tbody>\n          {!searching\n            ? contacts.map((contact) => (\n                <Contact\n                  contact={contact}\n                  key={contact.id}\n                  selectAll={selectAll}\n                />\n              ))\n            : searchContacts.map((contact) => (\n                <Contact\n                  contact={contact}\n                  key={contact.id}\n                  selectAll={selectAll}\n                />\n              ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport default Contacts;\n","import {\n  CREATE_CONTACT,\n  GET_CONTACT,\n  UPDATE_CONTACT,\n  DELETE_CONTACT,\n  SELECT_CONTACT,\n  CLEAR_CONTACT,\n  DELETE_SELECTED_CONTACT,\n  // SEARCH_CONTACT,\n} from \"../constant/types\";\n\nconst intialState = {\n  contacts: [\n    {\n      id: 1,\n      name: \"Rohan kumar\",\n      username: \"rohan\",\n      email: \"Sincere@april.biz\",\n\n      phone: \"7895459875\",\n    },\n    {\n      id: 2,\n      name: \"sohan kumar\",\n      username: \"Antonette\",\n      email: \"Shanna@melissa.tv\",\n\n      phone: \"9654785248\",\n    },\n    {\n      id: 3,\n      name: \"saurabh singh\",\n      username: \"saurabh\",\n      email: \"saurabh@gmail.com\",\n\n      phone: \"9587778954\",\n    },\n    {\n      id: 4,\n      name: \"honey singh\",\n      username: \"Karianne\",\n      email: \"honey@gmail.com\",\n\n      phone: \"6587458977\",\n    },\n    {\n      id: 5,\n      name: \"modi kumar\",\n      username: \"Kamren\",\n      email: \"modi@gmail.com\",\n      phone: \"785469888\",\n    },\n  ],\n  contact: null,\n  selectedContacts: [],\n  searchContacts: [],\n  searching: false,\n};\n\nexport const contactReducer = (state = intialState, action) => {\n  switch (action.type) {\n    case CREATE_CONTACT:\n      return {\n        ...state,\n        contacts: [action.payload, ...state.contacts],\n      };\n    case \"SEARCH_CONTACT\":\n      let search = state.contacts.filter((value) => {\n        if (value.name.includes(action.payload)) {\n          return true;\n        } else {\n          return false;\n        }\n      });\n      console.log(search);\n      return {\n        ...state,\n        searchContacts: [...search],\n      };\n\n    case \"SEARCHING_TRUE\":\n      return {\n        ...state,\n        searching: true,\n      };\n    case \"SEARCHING_FALSE\":\n      return {\n        ...state,\n        searching: false,\n      };\n    case GET_CONTACT:\n      let arr = state.contacts.filter(\n        (contact) => contact.id == action.payload\n      );\n      arr = arr.values();\n      for (let val of arr) {\n        arr = val;\n      }\n      return {\n        ...state,\n        contact: arr,\n      };\n    case UPDATE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.map((contact) =>\n          contact.id === action.payload.id ? action.payload : contact\n        ),\n      };\n    case DELETE_CONTACT:\n      return {\n        ...state,\n        contacts: state.contacts.filter(\n          (contact) => contact.id !== action.payload\n        ),\n      };\n    case DELETE_SELECTED_CONTACT:\n      return {\n        ...state,\n        contacts: [],\n        searchContacts: [],\n      };\n    case SELECT_CONTACT:\n      return {\n        ...state,\n        selectedContacts: action.payload,\n      };\n\n    case CLEAR_CONTACT:\n      return {\n        ...state,\n        selectedContacts: [],\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from \"redux\";\nimport { contactReducer } from \"./contactReducer\";\n\nexport default combineReducers({\n  contact: contactReducer,\n});\n","import { createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport rootReducer from \"./reducers\";\n\nconst store = createStore(rootReducer, composeWithDevTools());\n\nexport default store;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { addContact } from \"../../actions/contactAction\";\nimport shortid from \"shortid\";\nimport { useHistory } from \"react-router-dom\";\n\nconst AddContact = () => {\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  const craeteContact = (e) => {\n    e.preventDefault();\n    const new_contact = {\n      id: shortid.generate(),\n      name: name,\n      phone: phone,\n      email: email,\n    };\n    dispatch(addContact(new_contact));\n    history.push(\"/\");\n  };\n\n  return (\n    <div className=\"card border-0 shadow\">\n      <div className=\"card-header\">Add a Contact</div>\n      <div className=\"card-body\">\n        <form onSubmit={(e) => craeteContact(e)}>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your Phone Number\"\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your E-mail Address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <button className=\"btn btn-primary\" type=\"submit\">\n            Create Contact\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default AddContact;\n","import React, { useState, useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { getContact, updateContact } from \"../../actions/contactAction\";\nimport { useHistory } from \"react-router-dom\";\nimport { useParams } from \"react-router-dom\";\n\nconst EditContact = () => {\n  let { id } = useParams();\n  let history = useHistory();\n  const dispatch = useDispatch();\n  const contact = useSelector((state) => state.contact.contact);\n  const [name, setName] = useState(\"\");\n  const [email, setEmail] = useState(\"\");\n  const [phone, setPhone] = useState(\"\");\n\n  useEffect(() => {\n    if (contact != null) {\n      setName(contact.name);\n      setPhone(contact.phone);\n      setEmail(contact.email);\n    }\n    dispatch(getContact(id));\n  }, [contact, dispatch, id]);\n\n  const onUpdateContact = (e) => {\n    e.preventDefault();\n\n    const update_contact = Object.assign(contact, {\n      name: name,\n      phone: phone,\n      email: email,\n    });\n\n    dispatch(updateContact(update_contact));\n    history.push(\"/\");\n  };\n  return (\n    <div className=\"card border-0 shadow\">\n      <div className=\"card-header\">Add a Contact</div>\n      <div className=\"card-body\">\n        <form onSubmit={(e) => onUpdateContact(e)}>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your Name\"\n              value={name}\n              onChange={(e) => setName(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your Phone Number\"\n              value={phone}\n              onChange={(e) => setPhone(e.target.value)}\n            />\n          </div>\n          <div className=\"form-group\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              placeholder=\"Enter Your E-mail Address\"\n              value={email}\n              onChange={(e) => setEmail(e.target.value)}\n            />\n          </div>\n          <button className=\"btn btn-warning\" type=\"submit\">\n            Update Contact\n          </button>\n        </form>\n      </div>\n    </div>\n  );\n};\n\nexport default EditContact;\n","import React from \"react\";\nimport \"./styles/App.scss\";\nimport Navbar from \"./components/elements/Navbar\";\nimport Contacts from \"./components/contacts/Contacts\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport AddContact from \"./components/contacts/AddContact\";\nimport EditContact from \"./components/contacts/EditContact\";\n\nfunction App() {\n  return (\n    <Provider store={store}>\n      <Router>\n        <div className=\"App\">\n          <Navbar />\n          <div className=\"container\">\n            <div className=\"py-3\">\n              <Switch>\n                <Route exact path=\"/\" component={Contacts} />\n                <Route exact path=\"/contacts/add\" component={AddContact} />\n                <Route\n                  exact\n                  path=\"/contacts/edit/:id\"\n                  component={EditContact}\n                />\n              </Switch>\n            </div>\n          </div>\n        </div>\n      </Router>\n    </Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}